<?xml version="1.0"?>
<!-- このタグがロボットモデルを表す。nameはロボットのGazebo内の名前 -->
<robot name="myrobot">
  <!-- 世界座標系を表す疑似リンク。Gazebo用のおまじない -->
  <link name="world"/>

  <!-- 世界座標系とロボットモデルの関係を表すジョイント。ここでは固定なので、"fixed"タイプを指定している。
      ジョイントのタイプ：
        fixed: 
          固定。動かない。
        revolute:
          回転ジョイント。角度リミット付き。
        continuous:
          回転ジョイント。無限か移転する車輪など用。
        prismatic:
          直動ジョイント。
        floating:
          6Dに無制限に動く。
        planar:
          ２次元平面上を動く（３自由度）
   -->
  <joint name="world_joint" type="fixed">
      <!-- 親リンク -->
      <parent link="world"/>
      <!-- 子リンク -->
      <child link="base_link"/> 
  </joint>

  <!-- アームの下の方のリンク -->
  <link name="base_link">
    <!-- 質量パラメータ-->
    <inertial>
      <!-- 質量中心 -->
      <origin xyz="0 0 0.5" rpy="0 0 0"/>
      <!-- 質量 -->
      <mass value="1.0"/>
      <!-- 慣性テンソル -->
      <inertia ixx="1.0" ixy="0.0" ixz="0.0"
                         iyy="1.0" iyz="0.0"
                                   izz="1.0"/>
    </inertial>

    <!-- 見た目の設定 RVizやGazebo GUIで見える部分 -->
    <visual>
      <!-- geometry のリンク基準座標系からの変異分 -->
      <origin xyz="0 0 0.5" rpy="0 0 0"/>
      <!-- 形の情報を記述する部分。
        プリミティブ:
          box:
            箱
          sphere:
            玉
          cylinder:
            円筒
        メッシュ:
          STLやColladaが使える
      -->
      <geometry>
        <box size="0.1 0.1 1.0"/>
      </geometry>
    </visual>
    
    <!-- 干渉チェック用の形状データ。普通はVisualより軽いものを使う -->
    <collision>
      <origin xyz="0 0 0.5" rpy="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 1.0"/>
      </geometry>
    </collision>
  </link>
  <!-- このgazeboタグで囲まれた部分はGazebo用の追加設定。
       プラグイン読み込みの指定や、レンダリング用の材質設定をする。
       URDFとしては意味のない部分。 -->
  <gazebo reference="base_link">
    <!-- 色の設定 -->
    <material>Gazebo/Red</material>
  </gazebo>

  <!-- 下の腕と上の腕を接続するジョイント -->
  <joint name="tip_joint" type="continuous">
    <parent link="base_link"/>
    <child link="tip_link"/>
    <!-- 回転中心になる軸の指定 -->
    <axis xyz="0 1 0"/>
    <!-- 軸のオフセット（親リンクの座標系基準） -->
    <origin xyz="0 0.1 1.0" rpy="0 0 0"/>
    <!-- 動力学計算時の粘性抵抗係数。URDFで何に使っているかはよく知らない。 -->
    <dynamics damping="0.7"/>
  </joint>

  <!-- アクチュエータから、関節軸までの伝達系を表現する。 -->
  <transmission name="tip_trans">
    <!-- 伝達系のタイプ。SimpleTransmissionは単純に減速比をかけるようなもの -->
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="tip_joint"/> 
    <!-- アクチュエータのインターフェース情報。ros-controlsの対応するインターフェースを書く。
      EffortJointInterfaceはEffort(トルク？位置を二回微分した何か)を出力としてサーボするアクチュエータをモデル化したもの。
      VelocityJointInterfaceなどもある。
      controller_managerはこれを使って位置や速度をサーボする。
    -->
    <actuator name="tip_motor">
       <hardwareInterface>EffortJointInterface</hardwareInterface>
       <mechanismReduction>1</mechanismReduction>
    </actuator>
  </transmission>

  <!-- 腕先のリンク。根元と特にかわらない。 -->
  <link name="tip_link">
    <inertial>
      <mass value="1.0"/>
      <origin xyz="0 0 0.25" rpy="0 0 0"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0"
                         iyy="1.0" iyz="0.0"
                                   izz="1.0"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0.25" rpy="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.5"/>
      </geometry>
    </visual>
    <collision>
      <origin xyz="0 0 0.25" rpy="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.5"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="tip_link">
    <!-- 色だけかえてみる -->
    <material>Gazebo/Orange</material>
  </gazebo>

  <!-- カメラプラグインをくっつける座標系を確保するためのジョイント -->
  <joint name="camera_joint" type="fixed">
    <parent link="tip_link"/>
    <child link="camera_link"/>
    <origin xyz="0 0 0.5" rpy="0 -1.57 0"/>
  </joint>

  <!-- カメラプラグイン用のリンク。ほぼダミー状態。質量なども軽くしてある。
       X軸方向がカメラの向きになるので、親リンクから回転した状態で取り付けてある。
   -->
  <link name="camera_link">
    <inertial>
      <mass value="1e-6"/>
      <origin xyz="0.05 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0.0" ixz="0.0"
                         iyy="1.0" iyz="0.0"
                                   izz="1.0"/>
    </inertial>
    <visual>
      <origin xyz="0.05 0 0" rpy="0 1.57 0"/>
      <geometry>
        <cylinder radius="0.05" length="0.1"/>
      </geometry>
    </visual>
    <collision>
      <origin xyz="0.05 0 0" rpy="0 1.57 0"/>
      <geometry>
        <cylinder radius="0.05" length="0.1"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="camera_link">
    <material>Gazebo/FlatBlack</material>
  </gazebo>

  <!-- ros-controls の ControllerManagerおよびシミュレーションモデル用のRobotHW（デバイスIOをするモジュー流）をロードする。
       説明すると長くなるが、関節を位置制御したり、関節状態をPublishしたりするためのモジュール（Controller)を使うためのおまじない。
  -->
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/myrobot</robotNamespace>
    </plugin>
  </gazebo>

  <!-- カメラのプラグインを読み込む設定。上で記述したcamera_linkにくっつくように記述している。
       他は画像フォーマットやカメラパラメータなどを指定している。
   -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="tip_camera">
      <update_rate>30.0</update_rate>
      <camera name="tip_camera">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>600</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>500</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.005</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>myrobot/tip_camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
</robot>
