<?xml version="1.0" encoding="utf-8"?>
<launch>
  <!-- 床面だけのシミュレーション世界でGazeboを起動 -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <!-- ロボットモデル(myrobot.urdf)をパラメータとして読み出す -->
  <param name="robot_description" type="str" textfile="$(find myrobot_gazebo)/urdf/myrobot.urdf"/>

  <!-- 上でパラメータに保存したロボットモデルをSDFに変換して、Gazeboサーバーにロードする。
       Gazeboサーバーはプラグイン情報などを読み適切なライブラリを探し出して同時にロードする。
       今回の場合は、この時点でros_controlプラグインやカメラプラグインがロードされる。
   -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model myrobot" />

  <!-- controller_managerにロードさせたいControllerプラグインの設定。
       ros_controllersに入っている。
       JointStateController:
         JointStateをPublishしてくれるようにするもの
       JointPositionController:
         関節を位置制御する。その中でも出力にEffortをつかうもの。

       他に、グリッパー操作用のものや、IMUの情報をPublishするものなどたくさんある。
   -->
  <rosparam>
    myrobot:
      joint_state_controller:
        type: joint_state_controller/JointStateController
        publish_rate: 50  
      
      tip_joint_position_controller:
        type: effort_controllers/JointPositionController
        joint: tip_joint
        pid: {p: 100.0, i: 0.01, d: 10.0}
  </rosparam>

  <!-- Gazeboプラグインgazebo_ros_controlとしてロードされたcontroller_managerに、指定したControllerをロードさせている -->
  <node name="controller_spawner" pkg="controller_manager"
        type="spawner" respawn="false"
        output="screen" ns="/myrobot"
        args="tip_joint_position_controller joint_state_controller"/>

  <!-- カメラ画像を表示させるGUI。おまけ。 -->
  <node name="tip_camera_view" pkg="image_view2"
        type="image_view2" respawn="false"
        output="screen" args="image:=/myrobot/tip_camera/image_raw"/>
        
</launch>
